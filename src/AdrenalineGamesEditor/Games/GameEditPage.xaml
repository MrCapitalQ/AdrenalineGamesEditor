<?xml version="1.0" encoding="utf-8"?>
<Page x:Class="MrCapitalQ.AdrenalineGamesEditor.Games.GameEditPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:local="using:MrCapitalQ.AdrenalineGamesEditor.Games"
      xmlns:controls="using:CommunityToolkit.WinUI.Controls"
      xmlns:core="using:Microsoft.Xaml.Interactions.Core"
      xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
      xmlns:ui="using:CommunityToolkit.WinUI"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      mc:Ignorable="d">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition />
        </Grid.RowDefinitions>

        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup x:Name="PageStates">
                <VisualState x:Name="ContentLoaded" />
                <VisualState x:Name="ContentLoading">
                    <VisualState.StateTriggers>
                        <ui:IsEqualStateTrigger Value="{x:Bind _viewModel.IsLoading, Mode=OneWay}"
                                                To="True" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="CommandBar.Visibility"
                                Value="Collapsed" />
                        <Setter Target="PageContent.Visibility"
                                Value="Collapsed" />
                        <Setter Target="LoadingIndicator.Visibility"
                                Value="Visible" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
            <VisualStateGroup x:Name="ExePathStates">
                <VisualState x:Name="DefaultExePathState" />
                <VisualState x:Name="CustomExePathOnly">
                    <VisualState.StateTriggers>
                        <ui:CompareStateTrigger Comparison="LessThan"
                                                Value="{x:Bind _viewModel.ExePathOptions.Count, Mode=OneWay}"
                                                To="2" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="PackageExePaths.Visibility"
                                Value="Collapsed" />
                        <Setter Target="CustomExeBox.Header"
                                Value="Executable path" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PackageExePathSelected">
                    <VisualState.StateTriggers>
                        <ui:IsNotEqualStateTrigger Value="{x:Bind _viewModel.SelectedExePathOption.Value.Length, Mode=OneWay}"
                                                   To="0" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="ExePathDisplay.Visibility"
                                Value="Visible" />
                        <Setter Target="CustomExeBox.Visibility"
                                Value="Collapsed" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>

        <ProgressRing x:Name="LoadingIndicator"
                      IsActive="True"
                      Visibility="Collapsed"
                      Grid.RowSpan="3" />

        <CommandBar x:Name="CommandBar"
                    DefaultLabelPosition="Right"
                    VerticalContentAlignment="Center">
            <CommandBar.Content>
                <TextBlock Text="{x:Bind _viewModel.Title, Mode=OneWay}"
                           Style="{StaticResource TitleTextBlockStyle}"
                           Margin="12,0"
                           TextLineBounds="Tight" />
            </CommandBar.Content>
            <AppBarButton Icon="Save"
                          Label="Save"
                          Command="{x:Bind _viewModel.SaveCommand}">
                <AppBarButton.KeyboardAccelerators>
                    <KeyboardAccelerator Key="S"
                                         Modifiers="Control" />
                </AppBarButton.KeyboardAccelerators>
            </AppBarButton>
        </CommandBar>

        <InfoBar IsOpen="{x:Bind _viewModel.CanAutoFix, Mode=OneWay}"
                 Severity="Warning"
                 Message="The installed location of this game or app's package has changed and new equivalent paths were found."
                 Grid.Row="1">
            <InfoBar.ActionButton>
                <Button Content="Apply new paths"
                        HorizontalAlignment="Right"
                        Command="{x:Bind _viewModel.AutoFixCommand}" />
            </InfoBar.ActionButton>
        </InfoBar>

        <ScrollView x:Name="PageContent"
                    Grid.Row="2">
            <StackPanel Margin="16"
                        Spacing="16">
                <StackPanel HorizontalAlignment="Center">
                    <Grid>
                        <local:AdrenalineGameImage SourcePath="{x:Bind _viewModel.EffectiveImagePath, Mode=OneWay}"
                                                   Width="150"
                                                   Height="150"
                                                   CornerRadius="{StaticResource ControlCornerRadius}">
                            <local:AdrenalineGameImage.ContextFlyout>
                                <MenuFlyout>
                                    <MenuFlyoutItem Text="Copy image path"
                                                    Command="{x:Bind _viewModel.CopyImagePathCommand}" />
                                </MenuFlyout>
                            </local:AdrenalineGameImage.ContextFlyout>
                        </local:AdrenalineGameImage>

                        <FontIcon Glyph="&#xE7BA;"
                                  Foreground="{ThemeResource SystemFillColorCautionBrush}"
                                  Visibility="{x:Bind _viewModel.ImagePathRequiresAttention, Mode=OneWay}"
                                  Margin="16,8"
                                  VerticalAlignment="Top"
                                  HorizontalAlignment="Right"
                                  ToolTipService.ToolTip="Image path does not exist or cannot be accessed." />
                    </Grid>
                    <CommandBar DefaultLabelPosition="Right">
                        <AppBarButton Icon="Edit"
                                      Label="Edit"
                                      Command="{x:Bind _viewModel.EditImageCommand}" />
                        <AppBarButton Icon="Clear"
                                      Label="Remove"
                                      IsEnabled="{x:Bind _viewModel.ImagePath, Mode=OneWay, Converter={StaticResource IsNotEmptyStringConverter}}">
                            <AppBarButton.Flyout>
                                <Flyout x:Name="RemoveImageFlyout">
                                    <Flyout.FlyoutPresenterStyle>
                                        <Style TargetType="FlyoutPresenter"
                                               BasedOn="{StaticResource DefaultFlyoutPresenterStyle}">
                                            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
                                                    Value="Disabled" />
                                        </Style>
                                    </Flyout.FlyoutPresenterStyle>
                                    <StackPanel Spacing="8">
                                        <TextBlock Style="{ThemeResource BaseTextBlockStyle}"
                                                   Text="Remove custom image?" />
                                        <TextBlock Text="The custom image set for this game will no longer be used and the executable's icon will be used if available."
                                                   TextWrapping="Wrap" />
                                        <Button Content="Remove"
                                                HorizontalAlignment="Right"
                                                Command="{x:Bind _viewModel.RemoveImageCommand}">
                                            <interactivity:Interaction.Behaviors>
                                                <core:EventTriggerBehavior EventName="Click">
                                                    <core:CallMethodAction MethodName="Hide"
                                                                           TargetObject="{x:Bind RemoveImageFlyout}" />
                                                </core:EventTriggerBehavior>
                                            </interactivity:Interaction.Behaviors>
                                        </Button>
                                    </StackPanel>
                                </Flyout>
                            </AppBarButton.Flyout>
                        </AppBarButton>
                    </CommandBar>
                </StackPanel>
                <TextBox Text="{x:Bind _viewModel.DisplayName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                         Header="Display name" />
                <TextBox Text="{x:Bind _viewModel.Command, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                         Header="Command" />
                <Grid>
                    <StackPanel Spacing="8">
                        <ComboBox x:Name="PackageExePaths"
                                  ItemsSource="{x:Bind _viewModel.ExePathOptions, Mode=OneWay}"
                                  SelectedItem="{x:Bind _viewModel.SelectedExePathOption, Mode=TwoWay}"
                                  DisplayMemberPath="Display"
                                  Header="Executable path"
                                  HorizontalAlignment="Stretch" />
                        <TextBlock x:Name="ExePathDisplay"
                                   Text="{x:Bind _viewModel.ExePath, Mode=OneWay}"
                                   Style="{StaticResource CaptionTextBlockStyle}"
                                   Foreground="{StaticResource TextFillColorSecondaryBrush}"
                                   Visibility="Collapsed" />
                        <Grid x:Name="CustomExeBox"
                              ColumnSpacing="8"
                              HorizontalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <TextBox Text="{x:Bind _viewModel.ExePath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                     TextWrapping="Wrap" />
                            <Button Content="Browse"
                                    Command="{x:Bind _viewModel.BrowseExeCommand}"
                                    VerticalAlignment="Bottom"
                                    Grid.Column="1" />
                        </Grid>
                    </StackPanel>
                    <FontIcon Glyph="&#xE7BA;"
                              Foreground="{ThemeResource SystemFillColorCautionBrush}"
                              Visibility="{x:Bind _viewModel.ExePathRequiresAttention, Mode=OneWay}"
                              VerticalAlignment="Top"
                              HorizontalAlignment="Right"
                              ToolTipService.ToolTip="Executable path does not exist or cannot be accessed." />
                </Grid>
            </StackPanel>
        </ScrollView>
    </Grid>
</Page>
